---
import MainLayout from "../../../layouts/MainLayout.astro";
import "../../../styles/other-projects.css";
---

<head>
  <title>Math Alt-code Converter</title>
</head>

<MainLayout>
  <div class="font-[Nunito] flex flex-wrap lg:flex-row flex-col">
    <div class="w-1/2">
      <h1 class="text-4xl mb-4">Math Alt-Code Converter!</h1>
      <form id="expression-form" class="flex gap-4 flex-wrap">
        <input
          type="text"
          name="expression"
          id="exp-field"
          class="h-10 w-96 border-2 border-gray-300 px-5 pr-16 rounded-lg text-black focus:outline-none"
          placeholder="Enter your expression"
        />
        <button
          type="submit"
          id="submit"
          class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition-all outline-none focus:shadow-xl"
        >
          Submit
        </button>
      </form>
    </div>

    <div class="lg:w-1/2 lg:mt-0 my-4">
      <ul
        class="md:grid md:grid-rows-6 md:grid-flow-col list-disc mx-10 text-xl gap-x-7 flex flex-col"
      >
        <li>pi = &pi;</li>
        <li>^2 = &#178;</li>
        <li>sqrt = &Sqrt;</li>
        <li>cbrt = &#8731;</li>
        <li>frthrt = &#8732;</li>
        <li>(+-) = &pm;</li>
        <li>delta = &Delta;</li>
        <li>"&lt;=" = &leq;</li>
        <li>"&gt;=" = &geq;</li>
        <li>inf = &infin;</li>
        <li>-&gt; = &RightArrow;</li>
        <li>int = &int;</li>
        <li>sum = &sum;</li>
        <li>part = &part;</li>
        <li>Basic fractions work but not all</li>
        <li>Escape with quotes</li>
      </ul>
    </div>
  </div>
  <div id="answer"></div>
</MainLayout>

<script>
  const tokens = {
    pi: "&pi;",
    deg: "&deg;",
    "*": "&times;",
    int: "&int;",
    sqrt: "&Sqrt;",
    cbrt: "&#8731;",
    frthrt: "&#8732;",
    ">=": "&geq;",
    "<=": "&leq;",
    "(+-)": "&pm;",
    inf: "&infin;",
    "->": "&rarr;",
    sum: "&sum;",
    delta: "&Delta;",
    part: "&part;",
  };

  const fractions = {
    "1/2": "½",
    "1/3": "⅓",
    "2/3": "⅔",
    "1/4": "¼",
    "3/4": "¾",
    "1/5": "⅕",
    "2/5": "⅖",
    "3/5": "⅗",
    "4/5": "⅘",
    "1/6": "⅙",
    "5/6": "⅚",
    "1/7": "⅐",
    "1/8": "⅛",
    "3/8": "⅜",
    "5/8": "⅝",
    "7/8": "⅞",
    "1/9": "⅑",
    "1/10": "⅒",
  };

  const superscripts = {
    "0": "⁰",
    "1": "¹",
    "2": "²",
    "3": "³",
    "4": "⁴",
    "5": "⁵",
    "6": "⁶",
    "7": "⁷",
    "8": "⁸",
    "9": "⁹",
    "+": "⁺",
    "-": "⁻",
    "=": "⁼",
    "(": "⁽",
    ")": "⁾",
    a: "ᵃ",
    b: "ᵇ",
    c: "ᶜ",
    d: "ᵈ",
    e: "ᵉ",
    f: "ᶠ",
    g: "ᵍ",
    h: "ʰ",
    i: "ⁱ",
    j: "ʲ",
    k: "ᵏ",
    l: "ˡ",
    m: "ᵐ",
    n: "ⁿ",
    o: "ᵒ",
    p: "ᵖ",
    r: "ʳ",
    s: "ˢ",
    t: "ᵗ",
    u: "ᵘ",
    v: "ᵛ",
    w: "ʷ",
    x: "ˣ",
    y: "ʸ",
    z: "ᶻ",
    " ": " ",
  };

  function parser(expression: string): string {
    let finalStr = "";
    let index = 0;

    charLooper: while (index < expression.length) {
      const char = expression.charAt(index);
      if (char === '"') {
        let end = expression.indexOf('"', index + 1);
        if (end === -1) end = expression.length;

        let subStr = expression.substring(index + 1, end);
        finalStr += subStr;
        index += subStr.length + 2;
        continue;
      }

      const validChars = Object.entries(tokens).map(([key, _]) => key[0]);

      if (validChars.includes(char)) {
        for (const [key, value] of Object.entries(tokens)) {
          if (expression.substring(index).startsWith(key)) {
            finalStr += value;
            index += key.length;
            continue charLooper;
          }
        }
      }

      for (const [key, value] of Object.entries(fractions)) {
        if (expression.startsWith(key, index)) {
          finalStr += value;
          index += key.length;
          continue charLooper;
        }
      }

      if (char === "^") {
        const nextChar = expression.charAt(index + 1);
        if (nextChar === "(") {
          let end = expression.indexOf(")", index + 2);
          if (end === -1) end = expression.length;

          let rawSubStr = expression.substring(index + 2, end);
          let subStr = "";
          for (const c of rawSubStr) {
            if (!Object.keys(superscripts).includes(c)) {
              finalStr += "^(" + rawSubStr + ")";
              index += rawSubStr.length + 3;
              continue charLooper;
            }
            subStr += (superscripts as any)[c];
          }
          finalStr += subStr;
          index += rawSubStr.length + 3;
          continue;
        } else {
          const superscript = (superscripts as any)[nextChar];
          if (superscript) {
            finalStr += superscript;
            index += 2;
            continue;
          }
        }
      }

      finalStr += char;
      index++;
    }

    return finalStr;
  }

  const expressionForm = document.getElementById("expression-form");
  const submitButton = document.getElementById("submit");
  submitButton!.addEventListener("click", (e) => {
    e.preventDefault();
    const expressionString = new FormData(
      expressionForm as HTMLFormElement
    ).get("expression") as string;
    const value = parser(expressionString);
    document.getElementById("answer")!.innerHTML = value;
  });
</script>
